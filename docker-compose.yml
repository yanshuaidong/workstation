services:
  # Nginx反向代理
  nginx:
    image: nginx:alpine
    container_name: futures-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/logs:/var/log/nginx
      # SSL证书目录（如果需要HTTPS）
      # - ./nginx/ssl:/etc/ssl:ro
    depends_on:
      - workfront
      - automysqlback
    restart: unless-stopped
    networks:
      - futures-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 前端服务
  workfront:
    build:
      context: ./workfront
      dockerfile: Dockerfile
      # 构建时的内存限制（降低以适应低配置）
      shm_size: 256m
    container_name: futures-frontend
    expose:
      - "80"
    # 运行时内存限制（优化后）
    mem_limit: 256m
    memswap_limit: 512m
    restart: unless-stopped
    networks:
      - futures-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 60s  # 增加检查间隔
      timeout: 15s
      retries: 2

  # Selenium Chrome服务（低配置优化）
  selenium-chrome:
    image: selenium/standalone-chromium:latest
    container_name: futures-selenium
    shm_size: 512m  # 降低共享内存，适应2GB总内存
    mem_limit: 800m  # 限制最大内存使用
    memswap_limit: 1g  # 允许使用swap
    environment:
      - SE_NODE_MAX_SESSIONS=1  # 只允许1个并发会话
      - SE_SESSION_TIMEOUT=300  # 增加会话超时时间
      - SE_VNC_NO_PASSWORD=1
      - SE_START_XVFB=true
      - SE_SCREEN_WIDTH=1920
      - SE_SCREEN_HEIGHT=1080
      # Chrome性能优化参数
      - SE_OPTS=--disable-gpu --disable-dev-shm-usage --no-sandbox --disable-extensions --disable-logging --disable-background-timer-throttling --disable-renderer-backgrounding
    ports:
      - "4444:4444"  # Selenium Grid端口
      # - "7900:7900"  # 注释掉VNC端口以节省资源
    restart: unless-stopped
    networks:
      - futures-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4444/wd/hub/status"]
      interval: 30s  # 减少检查间隔，更快发现问题
      timeout: 10s
      retries: 5  # 增加重试次数
      start_period: 30s  # 启动等待时间

  # 后端API服务
  automysqlback:
    build:
      context: ./automysqlback
      dockerfile: Dockerfile
      # 构建时的内存限制（适合小内存服务器）
      shm_size: 256mb
    container_name: futures-backend
    expose:
      - "7001"
    # 运行时资源限制（优化后）
    mem_limit: 768m
    memswap_limit: 1g
    shm_size: 256mb
    environment:
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      # 浏览器配置
      - CHROME_BIN=/usr/bin/chromium
      - CHROMEDRIVER_PATH=/usr/bin/chromedriver
      - DISPLAY=:99
      # 数据库配置通过环境变量传入
      - DB_HOST=${DB_HOST:-rm-bp1u701yzm0y42oh1vo.mysql.rds.aliyuncs.com}
      - DB_PORT=${DB_PORT:-3306}
      - DB_USER=${DB_USER:-ysd}
      - DB_PASSWORD=${DB_PASSWORD:-Yan1234567}
      - DB_DATABASE=${DB_DATABASE:-futures}
      # Selenium配置
      - SELENIUM_REMOTE_URL=http://selenium-chrome:4444/wd/hub
    volumes:
      # 挂载日志目录
      - ./logs/backend:/app/logs
      # 挂载 /dev/shm 避免chromium内存问题
      - /dev/shm:/dev/shm
    restart: unless-stopped
    networks:
      - futures-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7001/api/settings"]
      interval: 30s  # 减少检查间隔
      timeout: 10s
      retries: 3
      start_period: 120s  # 增加启动等待时间

# Docker监控管理面板 - 已停用以节省内存
  # portainer:
  #   image: portainer/portainer-ce:latest
  #   container_name: futures-portainer
  #   expose:
  #     - "9000"
  #   volumes:
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - portainer_data:/data
  #   restart: unless-stopped
  #   networks:
  #     - futures-network

networks:
  futures-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  nginx-logs:
  backend-logs:
  # portainer_data:  # 已停用portainer
